/*******************************************************************************/
/*
Copyright (C) 2016 Beijing 7invensun Technology Co.Ltd.All rights reserved.
Permission is hereby granted, free of charge, to any person or organization obtaining
a copy of the software and accompanying documentation covered by this license(the "Software")
to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare
derivative works of the Software, and to permit third - parties to whom the Software
is furnished to do so, all subject to the following :
The copyright notices in the Software and this entire statement, including the above
license grant, this restriction and the following disclaimer, must be included in all
copies of the Software, in whole or in part, and all derivative works of the Software,
unless such copies or derivative works are solely in the form of machine - executable
object code generated by a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

@author 7invensun
*/
#pragma once

#ifdef _MSC_VER		
#   ifdef _7I_SDK_DLL_EXPORTS
#       define _7I_API __declspec(dllexport)	
#   else		
#       define _7I_API __declspec(dllimport)	
#   endif//_7I_SDK_DLL_EXPORTS 
#   ifndef _7I_CALL
#       define _7I_CALL __stdcall
#   endif//_7I_CALL
#else
#   define _7I_API __attribute__((visibility("default")))
#   define _7I_CALL 
#endif//_MSC_VER

/**
* @struct _7I_POINT_2D
* 二维坐标点。
*/
typedef struct _7I_POINT_2D
{
    float x, y;

}_7i_point2d_t;

/**
* @struct _7I_POINT_3D
* 三维坐标点。
*/
typedef struct _7I_POINT_3D
{
    float x, y, z;

}_7i_point3d_t;

/**
* @enum _7I_EYE_TYPE
* 枚举眼睛类型。
*/
typedef enum {
    L_EYE = 1,  /*!<左眼 */
    R_EYE = 2   /*!<右眼 */
} _7I_EYE_TYPE;

/**
* @enum _7I_MODE
* 枚举SDK使用模式。
*/
typedef enum {
    TRACK = 3, /*!<眼动追踪模式 */
    IRIS = 5   /*!<虹膜识别模式 */
} _7I_MODE;

/**
* @struct _7I_INIT_PARAM
* 初始化数据结构体，用于_7INV_start函数。
*/
typedef struct _7I_INIT_PARAM {
    _7I_MODE mode;        /*!<SDK使用模式（参考枚举类型：_7INVMode）。*/
    char path[260];       /*!<配置文件路径。*/
}_7i_init_param_t;

/**
* @struct _7I_COEFFICIENT
* 校准系数结构体。
*/
typedef struct _7I_COEFFICIENT {
    unsigned char buf[1024]; /*!<校准系数。*/
}_7i_coefficient_t;

/**
* @struct _7I_GAZE_POINT
* @注视点结构
*/
typedef struct _7I_GAZE_POINT
{
    unsigned int gaze_bit_mask;    /*!<下面6个信息掩码，标识那个信息有效和无效。*/
    _7i_point3d_t gaze_point;      /*!<注视点坐标，现阶段只有x，y有效，z值默认为0，其中x，y坐标的范围和校准时输入的几个校准点的范围有关，并不是固定值。*/
    _7i_point3d_t raw_point;       /*!<注视点平滑前坐标，x，y有效，z值默认为0，x，y范围同上。*/
    _7i_point3d_t smooth_point;    /*!<注视点平滑后坐标，x，y有效，z值默认为0，x，y范围同上。*/
    _7i_point3d_t gaze_origin;     /*!<注视瞳孔中心坐标。*/
    _7i_point3d_t gaze_direction;  /*!<注视矢量。*/
    float re;                      /*!<注视点re值，置信度。*/
    unsigned int ex_data_bit_mask; /*!<预留数据掩码。*/
    float ex_data[32];             /*!<预留数据。*/
} _7i_gaze_point_t;

/**
* @struct _7I_PUPIL_INFO
* @瞳孔结构
*/
typedef struct _7I_PUPIL_INFO
{
    unsigned int pupil_bit_mask;  /*!<瞳孔信息掩码，标识下面6个数据是否有效和无效。*/
    _7i_point2d_t pupil_center;   /*!<瞳孔中心(0-1)，具体含义是拍摄的瞳孔在图像上的具体坐标值，坐标为归一化的值，图像宽高默认为1。*/
    float pupil_distance;         /*!<瞳孔到镜头距离(mm)。*/
    float pupil_diameter;         /*!<瞳孔直径，瞳孔长轴(0-1)，具体含义是瞳孔椭圆长轴大小的像素值与图像宽的比值，属于归一化的值。*/
    float pupil_diameter_mm;      /*!<瞳孔直径，瞳孔长轴毫米值(mm)。*/
    float pupil_minor_axis;       /*!<瞳孔短轴(0-1)，具体含义是瞳孔椭圆短轴大小的像素值与图像宽的比值，属于归一化的值。*/
    float pupil_minor_axis_mm;    /*!<瞳孔短轴毫米值(mm)。*/
    unsigned int ex_data_bit_mask;/*!<预留数据掩码。*/
    float ex_data[32];            /*!<预留数据。*/
} _7i_pupil_info_t;

/**
* @struct _7I_EYE_EXDATA
* 扩展眼睛信息结构
*/
typedef struct _7I_EYE_EXDATA
{
    unsigned int eye_data_ex_bit_mask; /*!<眼睛附加信息掩码，标识下面4个数据的有效和无效。*/
    int blink;                         /*!<眨眼信息(0,3,6,10)，0-睁眼，3-闭眼，6-眨眼，10-离开。*/
    float openness;                    /*!<眼睛开合度(0-100)，表示眼睛开合程度，接近0为闭眼，100左右正常睁眼，大于100属于瞪眼，故意睁大眼睛。*/
    float eyelid_up;                   /*!<上眼皮数据(0-1)，具体含义是上眼皮在图像里垂直方向的位置，归一化的值，图像高为：1。*/
    float eyelid_down;                 /*!<下眼皮数据(0-1)，具体含义是下眼皮在图像里垂直方向的位置，归一化的值，图像高为：1。*/
    unsigned int ex_data_bit_mask;     /*!<预留数据掩码。*/
    float ex_data[32];                 /*!<预留数据。*/
} _7i_eye_ex_data_t;

/**
* @enum _7I_GAZE_STATE
* 枚举计算注视点状态类型。
*/
typedef enum
{
    NONE = 0,       /*!<默认无效状态。*/
    MOVING,         /*!<眼跳过程中：眼跳时，会有一段数据处于moving状态，且count、duration不断增加。*/
    MOVE_END,       /*!<眼跳过程结束：眼跳结束时，会得到最终确定的: count duration。*/
    STAYING,        /*!<注视过程中：停留注视时，会有一段数据处于staying状态，且count、duration不断增加，center根据实时加入的原始注视点坐标不断进行修正。*/
    STAY_END        /*!<注视过程结束：注视结束时，会得到最终确定的: count/duration/center。*/
} _7I_GAZE_STATE;

/**
* @struct _7I_FIXATION_SACCADE
* 注视或眼跳数据结构
*/
typedef struct _7I_FIXATION_SACCADE
{
    long long timestamp;   /*!<参与注视的第一个原始数据的时间戳（精度us）。*/
    long long duration;    /*!<持续时长（单位us）。*/
    int count;             /*!<参与注视的原始点数量大于0为有效。*/
    int state;             /*!<注视状态，参考_7I_GAZE_STATE。*/
    _7i_point2d_t center;  /*!<注视中心点。*/
}_7i_fixation_saccade_t;

/**
* @struct _7I_EYE_DATA_EX
* 眼球信息结构
*/
typedef struct _7I_EYE_DATA_EX
{
    unsigned long long timestamp;   /*!<时间戳。*/

    int recommend;                  /*!<是否有推荐点，0无推荐点，1使用左眼为推荐点，2使用右眼为推荐点。*/

    _7i_gaze_point_t recom_gaze;    /*!<推荐注视点。*/
    _7i_gaze_point_t left_gaze;     /*!<左眼注视点。*/
    _7i_gaze_point_t right_gaze;    /*!<右眼注视点。*/

    _7i_pupil_info_t left_pupil;    /*!<左眼瞳孔信息。*/
    _7i_pupil_info_t right_pupil;   /*!<右眼瞳孔信息。*/

    _7i_eye_ex_data_t left_ex_data; /*!<左眼附加信息（眨眼信息和上下眼皮信息）。*/
    _7i_eye_ex_data_t right_ex_data;/*!<右眼附件信息（眨眼信息和上下眼皮信息）。*/

    _7i_fixation_saccade_t stats;   /*!<统计信息。*/
} _7i_eye_data_ex_t;

/**
* @struct _7I_DATETIME
* 日期时间
*/
typedef struct _7I_DATETIME
{
    short year;            /*!<年*/
    unsigned char month;   /*!<月*/
    unsigned char day;     /*!<日*/
    unsigned char hour;    /*!<时*/
    unsigned char minute;  /*!<分*/
    unsigned char second;  /*!<秒*/
}_7i_date_time_t;

/**
* @struct _7I_UKEY_INFO
* 加密设备信息
*/
typedef struct _7I_UKEY_INFO
{
    unsigned char device_id[32];
    unsigned char app_id[20];
    unsigned char version[20];
    unsigned char tip_id[20];
    _7i_date_time_t end_time;
}_7i_ukey_info_t;

/**
* @struct _7I_CAMERA_SCREEN_FEATURE
* 屏幕信息（用于计算3D Gaze）
*/
typedef struct _7I_CAMERA_SCREEN_FEATURE
{
    double rx; // 相机沿X轴旋转角度
    double ry; // 相机沿Y轴旋转角度
    double rz; // 相机沿Z轴旋转角度
    double tx; // 光心在屏幕坐标系下的X坐标
    double ty; // 光心在屏幕坐标系下的Y坐标
    double tz; // 光心在屏幕坐标系下的Z坐标
    double screen_w; // 屏幕宽（毫米）
    double screen_h; // 屏幕高（毫米）
    int screen_pixel_w; // 屏幕高（毫米）
    int screen_pixel_h; // 屏幕高（像素）
}_7i_camera_screen_feature_t;

/** 用于接收相机状态的回调函数，并通过 _7i_set_camera_state_callback 函数来完成注册。
* @param state 连接状态（0 - 断开，1 - 连接）。
* @param context 用于传递调用者的上下文，可以为空。
* @return void
*/
typedef void (_7I_CALL* _7i_camera_state_callback_fn)(int state, void* context);

/** 用于接收眼图的回调函数，并通过 _7i_set_image_callback 函数来完成注册。
* @param eye 眼睛类型（参考 _7I_EYE_TYPE 枚举的定义）。
* @param image 眼图的数据区域（格式：灰度）。
* @param size 图像大小。
* @param width 图像宽。
* @param height 图像高。
* @param timestamp 眼图的时间戳。
* @param context 用于传递调用者的上下文，可以为空。
* @return void
*/
typedef void (_7I_CALL* _7i_image_callback_fn)(int eye, unsigned char* image, int size, int width, int height, long long timestamp, void* context);

/** 用于接收眼睛数据的回调函数，并通过 _7i_set_gaze_callback 函数来完成注册。
* @param eyes 眼睛类型（参考 _7I_EYE_DATA_EX 枚举的定义）。
* @param context 用于传递调用者的上下文，可以为空。
* @return void
*/
typedef void (_7I_CALL* _7i_gaze_callback_fn)(const _7i_eye_data_ex_t* eyes, void* context);

/** 用于接收校准点校准进度的回调函数。
* @param index 当前校准点的序号，与_7i_start_calibration_point函数传入的index值保持一致。
* @param percent 百分比
* @param context 用于传递调用者的上下文，可以为空。
* @return void
*/
typedef void (_7I_CALL* _7i_point_process_callback_fn)(int index, int percent, void* context);

/** 用于接收校准点完成状态的回调函数。
* @param index 当前校准点的序号，与_7i_start_calibration_point函数传入的index值保持一致。
* @param error 错误码（0 -成功，-1 -校准失败，-2 -校准被人为取消）
* @param context 用于传递调用者的上下文，可以为空。
* @return void
*/
typedef void (_7I_CALL* _7i_point_finish_callback_fn)(int index, int error, void* context);


#define _7I_CODE_INVALID_PARAMETER -7001L /*!<无效的参数。*/
#define _7I_CODE_PERMISSION_DENIED -1L    /*!<没有权限。*/

//=================================================================================================
/**
* @brief 注视点信息枚举类型
*/
typedef enum {
    ID_EYE_GAZE_POINT,        /*!<注视点坐标标识*/
    ID_EYE_GAZE_RAW_POINT,    /*!<注视点平滑前坐标标识*/
    ID_EYE_GAZE_SMOOTH_POINT, /*!<注视点平滑后坐标标识*/
    ID_EYE_GAZE_ORIGIN,       /*!<注视瞳孔中心坐标标识*/
    ID_EYE_GAZE_DIRECTION,    /*!<注视矢量标识*/
    ID_EYE_GAZE_RE            /*!<注视点re值*/
}_7I_EYE_GAZE_VALIDITY;

/**
* @brief 瞳孔信息枚举类型
*/
typedef enum {
    ID_PUPIL_INFO_CENTER,      /*!<瞳孔中心标识(0-1)*/
    ID_PUPIL_INFO_DISTANCE,    /*!<瞳孔到镜头距离标识(mm)*/
    ID_PUPIL_INFO_DIAMETER,    /*!<瞳孔直径，瞳孔长轴标识(0-1)*/
    ID_PUPIL_INFO_DIAMETER_MM, /*!<瞳孔直径，瞳孔长轴毫米值标识(mm)*/
    ID_PUPIL_INFO_MINORAXIS,   /*!<瞳孔短轴标识(0-1)*/
    ID_PUPIL_INFO_MINORAXIS_MM /*!<瞳孔短轴毫米值标识(mm)*/
}_7I_PUPIL_INFO_VALIDITY;

/**
* @brief 瞳孔扩展数据枚举类型
*/
typedef enum {
    ID_PUPIL_EX_DATA_SHIELD_STATUS = 22 /*!<瞳孔遮挡状态，0无遮挡，1有遮挡*/
}_7I_PUPIL_INFO_EX_DATA_VALIDITY;

/**
* @brief 眼睛其他信息枚举类型
*/
typedef enum {
    ID_EYE_EXDATA_BLINK,     /*!<眨眼信息标识*/
    ID_EYE_EXDATA_OPENNESS,  /*!<眼睛开合度标识*/
    ID_EYE_EXDATA_EYELIDUP,  /*!<上眼皮数据标识*/
    ID_EYE_EXDATA_EYELIDDOWN /*!<下眼皮数据标识*/
}_7I_EYE_EX_DATA_VALIDITY;

/**
* @brief 瞳孔方向枚举类型
*/
typedef enum {
    ID_EYE_EXDATA_PUPIL_LOCATION_X,/*!<瞳孔方向X*/
    ID_EYE_EXDATA_PUPIL_LOCATION_Y,/*!<瞳孔方向Y*/
    ID_EYE_EXDATA_PUPIL_LOCATION_Z /*!<瞳孔方向Z*/
}_7I_EYE_EX_DATA_EX_DATA_VALIDITY;


typedef enum {
    ID_EYE_GAZE_EXDATA_SCORE = 0   /*!<注视点分数*/
}_7I_EYE_GAZE_EX_DATA_VALIDITY;

/**
* @brief 获取眼睛信息的宏定义
*/
inline int _7I_GET_VALID_VALUE(unsigned char position, unsigned int bits)
{
    unsigned int the_mask = (((unsigned int)1) << position);
    return (the_mask &= bits) >> position;
}

/**
* @brief 眼睛结构体成员有效性判断的宏定义
*/

/*!<获取推荐点信息*/
/*!<推荐点坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RECOM_EYE_GAZE_POINT(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_POINT,(eyes)->recom_gaze.gaze_bit_mask)

/*!<推荐点平滑前坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RECOM_EYE_GAZE_RAW_POINT(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_RAW_POINT,(eyes)->recom_gaze.gaze_bit_mask)

/*!<推荐点平滑后坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RECOM_EYE_GAZE_SMOOTH_POINT(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_SMOOTH_POINT,(eyes)->recom_gaze.gaze_bit_mask)

/*!<推荐点瞳孔中心坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RECOM_EYE_GAZE_ORIGIN(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_ORIGIN,(eyes)->recom_gaze.gaze_bit_mask)

/*!<推荐点注视矢量是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RECOM_EYE_GAZE_DIRECTION(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_DIRECTION,(eyes)->recom_gaze.gaze_bit_mask)

/*!<推荐点注视点re值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RECOM_EYE_GAZE_RE(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_RE,(eyes)->recom_gaze.gaze_bit_mask)

/*!<推荐点分数值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RECOM_EYE_GAZE_EXDATA_SCORE(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_EXDATA_SCORE,(eyes)->recom_gaze.ex_data_bit_mask)

/*!<获取推荐点分数值，返回float（0-10）*/
#define _7I_GET_RECOM_EYE_GAZE_EXDATA_SCORE(eyes) (eyes)->recom_gaze.ex_data[ID_EYE_GAZE_EXDATA_SCORE]

//===================================================================================================================================================
/*!<获取左眼注视点信息*/
/*!<左眼注视点坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_GAZE_POINT(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_POINT,(eyes)->left_gaze.gaze_bit_mask)

/*!<左眼注视点平滑前坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_GAZE_RAW_POINT(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_RAW_POINT,(eyes)->left_gaze.gaze_bit_mask)

/*!<左眼注视点平滑后坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_GAZE_SMOOTH_POINT(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_SMOOTH_POINT,(eyes)->left_gaze.gaze_bit_mask)

/*!<左眼注视点瞳孔中心坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_GAZE_ORIGIN(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_ORIGIN,(eyes)->left_gaze.gaze_bit_mask)

/*!<左眼注视点注视矢量是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_GAZE_DIRECTION(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_DIRECTION,(eyes)->left_gaze.gaze_bit_mask)

/*!<左眼注视点注视点re值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_GAZE_RE(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_RE,(eyes)->left_gaze.gaze_bit_mask)

/*!<左眼注视点分数值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_GAZE_EXDATA_SCORE(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_EXDATA_SCORE,(eyes)->left_gaze.ex_data_bit_mask)

/*!<获取左眼注视点分数值，返回float（0-10）*/
#define _7I_GET_LEFT_EYE_GAZE_EXDATA_SCORE(eyes) (eyes)->left_gaze.ex_data[ID_EYE_GAZE_EXDATA_SCORE]

//===================================================================================================================================================
/*!<获取右眼注视点信息*/
/*!<右眼注视点坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_GAZE_POINT(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_POINT,(eyes)->right_gaze.gaze_bit_mask)

/*!<右眼注视点平滑前坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_GAZE_RAW_POINT(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_RAW_POINT,(eyes)->right_gaze.gaze_bit_mask)

/*!<右眼注视点平滑后坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_GAZE_SMOOTH_POINT(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_SMOOTH_POINT,(eyes)->right_gaze.gaze_bit_mask)

/*!<右眼注视点瞳孔中心坐标是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_GAZE_ORIGIN(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_ORIGIN,(eyes)->right_gaze.gaze_bit_mask)

/*!<右眼注视点注视矢量是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_GAZE_DIRECTION(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_DIRECTION,(eyes)->right_gaze.gaze_bit_mask)

/*!<右眼注视点注视点re值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_GAZE_RE(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_RE,(eyes)->right_gaze.gaze_bit_mask)

/*!<右眼注视点分数值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_GAZE_EXDATA_SCORE(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_GAZE_EXDATA_SCORE,(eyes)->right_gaze.ex_data_bit_mask)

/*!<获取右眼注视点分数值，返回float（0-10）*/
#define _7I_GET_RIGHT_EYE_GAZE_EXDATA_SCORE(eyes) (eyes)->right_gaze.ex_data[ID_EYE_GAZE_EXDATA_SCORE]

//===================================================================================================================================================
/*!<左眼瞳孔信息
/*!<左眼瞳孔中心是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_PUPIL_INFO_CENTER(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_CENTER,(eyes)->left_pupil.pupil_bit_mask)

/*!<左眼瞳孔到镜头距离是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_PUPIL_INFO_DISTANCE(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_DISTANCE,(eyes)->left_pupil.pupil_bit_mask)

/*!<左眼瞳孔直径是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_PUPIL_INFO_DIAMETER(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_DIAMETER,(eyes)->left_pupil.pupil_bit_mask)

/*!<左眼瞳孔直径毫米值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_PUPIL_INFO_DIAMETER_MM(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_DIAMETER_MM,(eyes)->left_pupil.pupil_bit_mask)

/*!<左眼瞳孔短轴是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_PUPIL_INFO_MINORAXIS(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_MINORAXIS,(eyes)->left_pupil.pupil_bit_mask)

/*!<左眼瞳孔短轴毫米值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_PUPIL_INFO_MINORAXIS_MM(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_MINORAXIS_MM,(eyes)->left_pupil.pupil_bit_mask)

//===================================================================================================================================================
/*!<右眼瞳孔信息*/
/*!<右眼瞳孔中心是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_PUPIL_INFO_CENTER(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_CENTER,(eyes)->right_pupil.pupil_bit_mask)

/*!<右眼瞳孔到镜头距离是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_PUPIL_INFO_DISTANCE(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_DISTANCE,(eyes)->right_pupil.pupil_bit_mask)

/*!<右眼瞳孔直径是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_PUPIL_INFO_DIAMETER(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_DIAMETER,(eyes)->right_pupil.pupil_bit_mask)

/*!<右眼瞳孔直径毫米值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_PUPIL_INFO_DIAMETER_MM(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_DIAMETER_MM,(eyes)->right_pupil.pupil_bit_mask)

/*!<右眼瞳孔短轴是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_PUPIL_INFO_MINORAXIS(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_MINORAXIS,(eyes)->right_pupil.pupil_bit_mask)

/*!<右眼瞳孔短轴毫米值是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_PUPIL_INFO_MINORAXIS_MM(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_PUPIL_INFO_MINORAXIS_MM,(eyes)->right_pupil.pupil_bit_mask)

//===================================================================================================================================================
/*!<左眼附件信息*/
/*!<左眼眨眼信息是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_EXDATA_BLINK(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_EXDATA_BLINK,(eyes)->left_ex_data.eye_data_ex_bit_mask)

/*!<左眼眼睛开合度是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_EXDATA_OPENNESS(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_EXDATA_OPENNESS,(eyes)->left_ex_data.eye_data_ex_bit_mask)

/*!<左眼上眼皮数据是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_EXDATA_EYELIDUP(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_EXDATA_EYELIDUP,(eyes)->left_ex_data.eye_data_ex_bit_mask)

/*!<左眼下眼皮数据是否有效，0为无效，1为有效*/
#define _7I_ISVALID_LEFT_EYE_EXDATA_EYELIDDOWN(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_EXDATA_EYELIDDOWN,(eyes)->left_ex_data.eye_data_ex_bit_mask)

//===================================================================================================================================================
/*!<右眼附件信息*/
/*!<右眼眨眼信息是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_EXDATA_BLINK(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_EXDATA_BLINK,(eyes)->right_ex_data.eye_data_ex_bit_mask)

/*!<右眼眼睛开合度是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_EXDATA_OPENNESS(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_EXDATA_OPENNESS,(eyes)->right_ex_data.eye_data_ex_bit_mask)

/*!<右眼上眼皮数据是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_EXDATA_EYELIDUP(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_EXDATA_EYELIDUP,(eyes)->right_ex_data.eye_data_ex_bit_mask)

/*!<右眼下眼皮数据是否有效，0为无效，1为有效*/
#define _7I_ISVALID_RIGHT_EYE_EXDATA_EYELIDDOWN(eyes) _7I_GET_VALID_VALUE((unsigned char)ID_EYE_EXDATA_EYELIDDOWN,(eyes)->right_ex_data.eye_data_ex_bit_mask)
