/*******************************************************************************/
/*
Copyright (C) 2016 Beijing 7invensun Technology Co.Ltd.All rights reserved.
Permission is hereby granted, free of charge, to any person or organization obtaining
a copy of the software and accompanying documentation covered by this license(the "Software")
to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare
derivative works of the Software, and to permit third - parties to whom the Software
is furnished to do so, all subject to the following :
The copyright notices in the Software and this entire statement, including the above
license grant, this restriction and the following disclaimer, must be included in all
copies of the Software, in whole or in part, and all derivative works of the Software,
unless such copies or derivative works are solely in the form of machine - executable
object code generated by a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

@author 7invensun
*/
#ifndef __7I_SDK_H__
#define __7I_SDK_H__

#include "_7i_types.h"

#ifndef _7I_DECLARE
#define _7I_DECLARE _7I_API int _7I_CALL
#endif

#ifdef __cplusplus
extern "C" {
#endif
	
	/** 设置相机状态回调函数。
	* @param cb 回调函数指针
	* @param context 用于传递调用者的上下文，可以为空。
	* @return int
	*  0 成功
	* -1 失败
	*/
	_7I_DECLARE _7i_set_camera_state_callback(_7i_camera_state_callback_fn cb, void* context);

	/** 设置眼图回调函数。
	* @param cb 回调函数指针
	* @param context 用于传递调用者的上下文，可以为空。
	* @return int
	*  0 成功
	* -1 没有授权
	* -2 回调函数为空
	*/
	_7I_DECLARE _7i_set_image_callback(_7i_image_callback_fn cb, void* context);

	/** 设置眼睛数据回调函数。
	* @param cb 回调函数指针
	* @param context 用于传递调用者的上下文，可以为空。
	* @return int
	*  0 成功
	* -1 没有授权
	* -2 回调函数为空
	*/
	_7I_DECLARE _7i_set_gaze_callback(_7i_gaze_callback_fn cb, void* context);

	/** 设置屏幕尺寸（适用于A3/A6设备）
        * @param width 屏幕宽（毫米）
        * @param height 屏幕高（毫米）
	* @return int
	*  0 成功
	* -1 失败
	*/
    _7I_DECLARE _7i_set_screen_size(double width, double height);

    /** 设置屏幕像素值（linux平台）
    * @param width 屏幕宽（像素）
    * @param height 屏幕高（像素）
    * @return int
    *  0 成功
    * -1 失败
    */
    _7I_DECLARE _7i_set_screen_pixel(int width, int height);

	/** 设置平滑（适用于A3/A6设备）
	* @param smooth 取值范围[1,10]，数值越大，平滑度越大。
	* @return int
	*  0 成功
	* -1 平滑参数设置失败
	* -71 参数设置错误
	*/
	_7I_DECLARE _7i_set_smooth(int smooth);

	/** 连接并获取加密设备信息
	* @param password 登录密码
	* @param info 加密狗信息
	* @return int
	*  0-成功
	* -11 没有找到加密狗
	* -12 创建加密狗实例失败
	* -15 输入密码为空
	* -11015 设备未找到
	* -12015 密码错误
	* -13015 加密狗权限过期
	* -14015 连接错误
	* -16015 参数错误
	* -18015 时间错误
	* 其它：设备错误
	*/
	_7I_DECLARE _7i_device_connect(const char* password, _7i_ukey_info_t* info);

	/** 断开加密设备
	* @return int
	*  0 成功
	* -21 设备断开失败
	* -22 未找到设备，请先调用_7i_device_connect连接加密狗。
	*/
	_7I_DECLARE _7i_device_disconnect(void);

	/** 启动SDK
	* @param config_path 配置文件路径
	* @return int
	*  0 成功
	* -1 没有授权
	* -2 传入的路径不是utf8格式
	* -4 没有摄像头或者有多个摄像头
	* -1112 初始化相机失败（启动相机失败，找不到相机）
	* -1113 运行相机失败（运行视频捕获失败）
	* -2112 初始化校验相机失败（启动相机pid错误）
	* -3112或-4112 初始化校验相机失败（相机USB错误）
	*/
	_7I_DECLARE _7i_start(const char* config_path);

	/** 停止SDK
	* @param args 初始化参数
	* @return int
	*  0 成功
	* -1 没有授权
	*/
	_7I_DECLARE _7i_stop(void);

	/** 开始眼动追踪
	* @param coe 校准系数
	* @return int
	*  0 成功
	* -1 没有授权
	* -2 初始化失败或没有初始化
	* -3 SDK版本号不匹配
	* -271 未设置eye，设置eye错误。
	* -272 设置计算系数失败
	*/
	_7I_DECLARE _7i_start_tracking(const _7i_coefficient_t* coe);

	/** 停止眼动追踪
	* @return int
	*  0 成功
	* -1 没有授权
	*/
	_7I_DECLARE _7i_stop_tracking(void);

	/**
	* @brief 开始校准
	* @param points 校准点总数
	* @return int
	*  0 成功
	* -1 启动校准失败，没有权限。
	* -2 初始化失败或没有初始化
	* -212或-7001 参数错误
	*/
	_7I_DECLARE _7i_start_calibration(int points);

	/**
	* @brief 开始校准某个点
	* @param index 校准点索引
	* @param point 校准点的基准坐标（x,y 使用归一化值）
	* @param cb1 校准这个点完成时的回调
	* @param data1 对应cb1的回调，用于传递调用者的上下文，可以为空。
	* @param cb2 校准这个点时每张图的眼球信息回调
	* @param data2 对应cb2的回调，用于传递调用者的上下文，可以为空。
	* @return int
	*  0 成功
	* -1 没有授权
	* -2 初始化失败或没有初始化
	* -221 没有设置eye
	* -221222 参数错误，起始校准索引点错误。
	*/
	_7I_DECLARE _7i_start_calibration_point(int index, const _7i_point2d_t* point,
		_7i_point_process_callback_fn cb1, void* context1, _7i_point_finish_callback_fn cb2, void* context2);

	/**
	* @brief 取消校准某点
	* @return int
	*  0 成功
	* -1 没有授权
	* -2 初始化失败或没有初始化
	* -241 没有设置eye
	*/
	_7I_DECLARE _7i_cancel_calibration(void);

	/**
	* @brief 计算校准系数
	* @param out_coe 标定系数,输出参数。
	* @return int
	*  0 成功
	* -1 没有授权
	* -2 初始化失败或没有初始化
	* -251 没有设置eye
	* -253 标定系数参数为空
	* -251252 计算系数失败
	*/
	_7I_DECLARE _7i_compute_calibration(_7i_coefficient_t* out_coe);

	/**
	* @brief 完成校准流程，调用后会清除所有校准数据，校准流程结束。
	* @return
	*  0 成功
	* -1 没有授权
	* -2 初始化失败或没有初始化
	*/
	_7I_DECLARE _7i_complete_calibration(void);

	/**
	* @brief 获取校准分数（百分制）。
	* @param left 左眼得分，right 右眼得分。
	* @return
	*  0 成功
	* -1 失败
	*/
	_7I_DECLARE _7i_get_calibration_score(float* left, float* right);

	/**
	* @brief 设置校准模式。
	* @param mode（0 = 双眼校准，1 = 左眼校准， 2 = 右眼校准）
	* @return
	*  0 成功
	* -1 失败
	*/
	_7I_DECLARE _7i_set_calibration_mode(int mode);

	/**
	* @brief 根据枚举值类型和结构体数据掩码判断数据项有效性
	* @param position 枚举值（_7I_EYE_GAZE_VALIDITY，_7I_PUPIL_INFO_VALIDITY，_7I_EYE_EX_DATA_VALIDITY，_7I_EYE_EX_DATA_EX_DATA_VALIDITY）
	* @param bits 结构体中的掩码项
	* @return
	*  0 无效
	*  1 有效
	*/
	_7I_DECLARE _7i_get_valid_value(unsigned char position, unsigned int bits);

	/**
	* @brief 设置相机和屏幕信息。
	* @param feature 相机和屏幕信息
	* @return
	*  0 成功
	* -1 失败
	*/
	_7I_DECLARE _7i_set_camera_screen_feature(const _7i_camera_screen_feature_t* feature);

#ifdef __cplusplus
}
#endif

#endif//__7I_SDK_H__